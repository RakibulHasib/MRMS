// <auto-generated />
using System;
using MRMS.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MRMS.DAL.Migrations
{
    [DbContext(typeof(MRMSDBContext))]
    [Migration("20230201214843_MRMSContext")]
    partial class MRMSContext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MRMS.Model.AgencySection.Agency", b =>
                {
                    b.Property<int>("AgencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgencyId"), 1L, 1);

                    b.Property<string>("Accountant")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manager")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RL")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("AgencyId");

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("MRMS.Model.AgencySection.AgencySyndicate", b =>
                {
                    b.Property<int>("AgencySyndicateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgencySyndicateId"), 1L, 1);

                    b.Property<int>("AgencyId")
                        .HasColumnType("int");

                    b.HasKey("AgencySyndicateId");

                    b.HasIndex("AgencyId")
                        .IsUnique();

                    b.ToTable("AgencySyndicates");
                });

            modelBuilder.Entity("MRMS.Model.ApplicantSection.Applicant", b =>
                {
                    b.Property<int>("ApplicantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicantId"), 1L, 1);

                    b.Property<int>("AgentId")
                        .HasColumnType("int");

                    b.Property<string>("BirthCertificateNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBrith")
                        .HasColumnType("date");

                    b.Property<int>("Education")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FathersName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<double>("Height")
                        .HasColumnType("FLOAT");

                    b.Property<string>("JobExperience")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("MothersName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("PassportExpiry")
                        .HasColumnType("date");

                    b.Property<string>("PasssportNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresentAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Religion")
                        .HasColumnType("int");

                    b.Property<string>("Spouse")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("TrainingId")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("FLOAT");

                    b.HasKey("ApplicantId");

                    b.HasIndex("AgentId");

                    b.HasIndex("TrainingId");

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("MRMS.Model.ApplicantSection.ApplicantFile", b =>
                {
                    b.Property<int>("ApplicantFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicantFileId"), 1L, 1);

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Filepath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicantFileId");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("FileTypeId");

                    b.ToTable("ApplicantFiles");
                });

            modelBuilder.Entity("MRMS.Model.ApplicantSection.ApplicantIssue", b =>
                {
                    b.Property<int>("ApplicantIssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicantIssueId"), 1L, 1);

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ResolveDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ApplicantIssueId");

                    b.HasIndex("ApplicantId");

                    b.ToTable("ApplicantIssues");
                });

            modelBuilder.Entity("MRMS.Model.ApplicantSection.ApplicantIssueComment", b =>
                {
                    b.Property<int>("ApplicantIssueCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicantIssueCommentId"), 1L, 1);

                    b.Property<int>("ApplicantIssueId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicantIssueCommentId");

                    b.HasIndex("ApplicantIssueId");

                    b.ToTable("ApplicantIssueComment");
                });

            modelBuilder.Entity("MRMS.Model.ApplicationSection.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationId"), 1L, 1);

                    b.Property<int>("AgencyId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TradeId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("ApplicantId")
                        .IsUnique();

                    b.HasIndex("TradeId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("MRMS.Model.ApplicationSection.ApplicationFile", b =>
                {
                    b.Property<int>("ApplicationFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationFileId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Filepath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationFileId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("FileTypeId");

                    b.ToTable("ApplicationFiles");
                });

            modelBuilder.Entity("MRMS.Model.ApplicationSection.ApplicationFileTransfer", b =>
                {
                    b.Property<int>("ApplicationFileTransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationFileTransferId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<string>("From")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("To")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("date");

                    b.HasKey("ApplicationFileTransferId");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("FileTypeId");

                    b.ToTable("ApplicationFileTransfers");
                });

            modelBuilder.Entity("MRMS.Model.ApplicationSection.ApplicationIssue", b =>
                {
                    b.Property<int>("ApplicationIssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationIssueId"), 1L, 1);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ResolveDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ApplicationIssueId");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationIssues");
                });

            modelBuilder.Entity("MRMS.Model.ApplicationSection.ApplicationIssueComment", b =>
                {
                    b.Property<int>("ApplicationIssueCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationIssueCommentId"), 1L, 1);

                    b.Property<int>("ApplicationIssueId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationIssueCommentId");

                    b.HasIndex("ApplicationIssueId");

                    b.ToTable("ApplicationIssueComment");
                });

            modelBuilder.Entity("MRMS.Model.CallingSection.Calling", b =>
                {
                    b.Property<int>("CallingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CallingId"), 1L, 1);

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<string>("CallingGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CallingIssueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CallingStatus")
                        .HasColumnType("int");

                    b.Property<int>("TradeId")
                        .HasColumnType("int");

                    b.HasKey("CallingId");

                    b.HasIndex("ApplicantId")
                        .IsUnique();

                    b.HasIndex("TradeId");

                    b.ToTable("Callings");
                });

            modelBuilder.Entity("MRMS.Model.CallingSection.CallingFile", b =>
                {
                    b.Property<int>("CallingFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CallingFileId"), 1L, 1);

                    b.Property<int>("CallingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Filepath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CallingFileId");

                    b.HasIndex("CallingId");

                    b.HasIndex("FileTypeId");

                    b.ToTable("CallingFiles");
                });

            modelBuilder.Entity("MRMS.Model.CallingSection.CallingIssue", b =>
                {
                    b.Property<int>("CallingIssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CallingIssueId"), 1L, 1);

                    b.Property<int>("CallingId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ResolveDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("CallingIssueId");

                    b.HasIndex("CallingId");

                    b.ToTable("CallingIssues");
                });

            modelBuilder.Entity("MRMS.Model.CallingSection.CallingIssueComment", b =>
                {
                    b.Property<int>("CallingIssueCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CallingIssueCommentId"), 1L, 1);

                    b.Property<int>("CallingIssueId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CallingIssueCommentId");

                    b.HasIndex("CallingIssueId");

                    b.ToTable("CallingIssueComment");
                });

            modelBuilder.Entity("MRMS.Model.CommonSection.Agent", b =>
                {
                    b.Property<int>("AgentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AgentId"), 1L, 1);

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AgentId");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("MRMS.Model.CommonSection.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CompanyId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.HasIndex("CountryId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("MRMS.Model.CommonSection.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("MRMS.Model.CommonSection.FileType", b =>
                {
                    b.Property<int>("FileTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileTypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("FileTypeId");

                    b.ToTable("FileType");
                });

            modelBuilder.Entity("MRMS.Model.DemandSection.Demand", b =>
                {
                    b.Property<int>("DemandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DemandId"), 1L, 1);

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DemandExpiryDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DemandId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Demands");
                });

            modelBuilder.Entity("MRMS.Model.DemandSection.DemandFile", b =>
                {
                    b.Property<int>("DemandFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DemandFileId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("DemandId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Filepath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DemandFileId");

                    b.HasIndex("DemandId");

                    b.HasIndex("FileTypeId");

                    b.ToTable("DemandFiles");
                });

            modelBuilder.Entity("MRMS.Model.DemandSection.DemandIssue", b =>
                {
                    b.Property<int>("DemandIssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DemandIssueId"), 1L, 1);

                    b.Property<int>("DemandId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ResolveDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("DemandIssueId");

                    b.HasIndex("DemandId");

                    b.ToTable("DemandIssues");
                });

            modelBuilder.Entity("MRMS.Model.DemandSection.DemandIssueComment", b =>
                {
                    b.Property<int>("DemandIssueCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DemandIssueCommentId"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DemandIssueId")
                        .HasColumnType("int");

                    b.HasKey("DemandIssueCommentId");

                    b.HasIndex("DemandIssueId");

                    b.ToTable("DemandIssueComment");
                });

            modelBuilder.Entity("MRMS.Model.DemandSection.Trade", b =>
                {
                    b.Property<int>("TradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TradeId"), 1L, 1);

                    b.Property<string>("Accomodation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Age")
                        .HasMaxLength(3)
                        .HasColumnType("int");

                    b.Property<string>("ContractPeriod")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("DemandId")
                        .HasColumnType("int");

                    b.Property<int>("FemaleQuota")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<string>("Food")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("MaleQuota")
                        .HasMaxLength(5)
                        .HasColumnType("int");

                    b.Property<int>("OverTime")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.Property<decimal>("Salary")
                        .HasColumnType("money");

                    b.Property<int>("WorkingHours")
                        .HasMaxLength(2)
                        .HasColumnType("int");

                    b.HasKey("TradeId");

                    b.HasIndex("DemandId");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("MRMS.Model.EmployeeSection.Designation", b =>
                {
                    b.Property<int>("DesignationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DesignationId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("DesignationId");

                    b.ToTable("Designations");
                });

            modelBuilder.Entity("MRMS.Model.EmployeeSection.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"), 1L, 1);

                    b.Property<string>("BirthCertificateNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBrith")
                        .HasColumnType("date");

                    b.Property<int>("DesignationId")
                        .HasColumnType("int");

                    b.Property<int>("Education")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FathersName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("MothersName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PermanentAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresentAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Religion")
                        .HasColumnType("int");

                    b.Property<string>("Spouse")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("DesignationId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("MRMS.Model.EmployeeSection.EmployeeFile", b =>
                {
                    b.Property<int>("EmployeeFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeFileId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Filepath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeFileId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FileTypeId");

                    b.ToTable("EmployeeFiles");
                });

            modelBuilder.Entity("MRMS.Model.FlightSection.Flight", b =>
                {
                    b.Property<int>("FlightId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightId"), 1L, 1);

                    b.Property<string>("AirlinesName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ArrivalPlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeparturePlace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlightBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlightNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisaId")
                        .HasColumnType("int");

                    b.HasKey("FlightId");

                    b.HasIndex("VisaId")
                        .IsUnique();

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("MRMS.Model.FlightSection.FlightFile", b =>
                {
                    b.Property<int>("FlightFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightFileId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Filepath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.HasKey("FlightFileId");

                    b.HasIndex("FileTypeId");

                    b.HasIndex("FlightId");

                    b.ToTable("FlightFiles");
                });

            modelBuilder.Entity("MRMS.Model.FlightSection.FlightIssue", b =>
                {
                    b.Property<int>("FlightIssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightIssueId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FlightId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ResolveDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("FlightIssueId");

                    b.HasIndex("FlightId");

                    b.ToTable("FlightIssues");
                });

            modelBuilder.Entity("MRMS.Model.FlightSection.FlightIssueComment", b =>
                {
                    b.Property<int>("FlightIssueCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FlightIssueCommentId"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FlightIssueId")
                        .HasColumnType("int");

                    b.HasKey("FlightIssueCommentId");

                    b.HasIndex("FlightIssueId");

                    b.ToTable("FlightIssueComment");
                });

            modelBuilder.Entity("MRMS.Model.ForwardingSection.BMET", b =>
                {
                    b.Property<int>("BMETId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BMETId"), 1L, 1);

                    b.Property<int>("ForwardingId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("BMETId");

                    b.HasIndex("ForwardingId")
                        .IsUnique();

                    b.ToTable("BMETs");
                });

            modelBuilder.Entity("MRMS.Model.ForwardingSection.FingerPrint", b =>
                {
                    b.Property<int>("FingerPrintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FingerPrintId"), 1L, 1);

                    b.Property<int>("FingerPrintStatus")
                        .HasColumnType("int");

                    b.Property<int>("ForwardingId")
                        .HasColumnType("int");

                    b.HasKey("FingerPrintId");

                    b.HasIndex("ForwardingId")
                        .IsUnique();

                    b.ToTable("FingerPrints");
                });

            modelBuilder.Entity("MRMS.Model.ForwardingSection.Forwarding", b =>
                {
                    b.Property<int>("ForwardingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ForwardingId"), 1L, 1);

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.HasKey("ForwardingId");

                    b.HasIndex("ApplicantId");

                    b.ToTable("Forwardings");
                });

            modelBuilder.Entity("MRMS.Model.ForwardingSection.ForwardingFile", b =>
                {
                    b.Property<int>("ForwardingFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ForwardingFileId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Filepath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ForwardingId")
                        .HasColumnType("int");

                    b.HasKey("ForwardingFileId");

                    b.HasIndex("FileTypeId");

                    b.HasIndex("ForwardingId");

                    b.ToTable("ForwardingFiles");
                });

            modelBuilder.Entity("MRMS.Model.ForwardingSection.ForwardingFileTransfer", b =>
                {
                    b.Property<int>("ForwardingFileTransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ForwardingFileTransferId"), 1L, 1);

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ForwardingId")
                        .HasColumnType("int");

                    b.Property<string>("From")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("To")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("date");

                    b.HasKey("ForwardingFileTransferId");

                    b.HasIndex("FileTypeId");

                    b.HasIndex("ForwardingId");

                    b.ToTable("ForwardingFileTransfers");
                });

            modelBuilder.Entity("MRMS.Model.ForwardingSection.ForwardingIssue", b =>
                {
                    b.Property<int>("ForwardingIssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ForwardingIssueId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ForwardingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ResolveDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ForwardingIssueId");

                    b.HasIndex("ForwardingId");

                    b.ToTable("ForwardingIssues");
                });

            modelBuilder.Entity("MRMS.Model.ForwardingSection.ForwardingIssueComment", b =>
                {
                    b.Property<int>("ForwardingIssueCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ForwardingIssueCommentId"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ForwardingIssueId")
                        .HasColumnType("int");

                    b.HasKey("ForwardingIssueCommentId");

                    b.HasIndex("ForwardingIssueId");

                    b.ToTable("ForwardingIssueComment");
                });

            modelBuilder.Entity("MRMS.Model.ForwardingSection.Training", b =>
                {
                    b.Property<int>("TrainingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainingId"), 1L, 1);

                    b.Property<int>("ForwardingId")
                        .HasColumnType("int");

                    b.Property<int>("TrainingCentreId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TrainingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrainingDuration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainingStatus")
                        .HasColumnType("int");

                    b.HasKey("TrainingId");

                    b.HasIndex("ForwardingId")
                        .IsUnique();

                    b.HasIndex("TrainingCentreId");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("MRMS.Model.ForwardingSection.TrainingCentre", b =>
                {
                    b.Property<int>("TrainingCentreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainingCentreId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrainingCentreId");

                    b.ToTable("TrainingCentres");
                });

            modelBuilder.Entity("MRMS.Model.MedicalSection.MedicalCenter", b =>
                {
                    b.Property<int>("MedicalCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalCenterId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicalCenterId");

                    b.ToTable("MedicalCenters");
                });

            modelBuilder.Entity("MRMS.Model.MedicalSection.MedicalFile", b =>
                {
                    b.Property<int>("MedicalFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalFileId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Filepath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.HasKey("MedicalFileId");

                    b.HasIndex("FileTypeId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("MedicalFiles");
                });

            modelBuilder.Entity("MRMS.Model.MedicalSection.MedicalIssue", b =>
                {
                    b.Property<int>("MedicalIssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalIssueId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("date");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ResolveDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("MedicalIssueId");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("MedicalIssues");
                });

            modelBuilder.Entity("MRMS.Model.MedicalSection.MedicalIssueComment", b =>
                {
                    b.Property<int>("MedicalIssueCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalIssueCommentId"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicalIssueId")
                        .HasColumnType("int");

                    b.HasKey("MedicalIssueCommentId");

                    b.HasIndex("MedicalIssueId");

                    b.ToTable("MedicalIssueComment");
                });

            modelBuilder.Entity("MRMS.Model.MedicalSection.MedicalRecord", b =>
                {
                    b.Property<int>("MedicalRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalRecordId"), 1L, 1);

                    b.Property<int>("AgencySyndicateId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<int>("DemandId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<int>("MedicalCenterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MedicalDate")
                        .HasColumnType("date");

                    b.Property<int>("MedicalStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("SlipIssueDate")
                        .HasColumnType("date");

                    b.HasKey("MedicalRecordId");

                    b.HasIndex("AgencySyndicateId");

                    b.HasIndex("ApplicantId")
                        .IsUnique();

                    b.HasIndex("DemandId");

                    b.HasIndex("MedicalCenterId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("MRMS.Model.RejectSection.RejectedApplicant", b =>
                {
                    b.Property<int>("RejectedApplicantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RejectedApplicantId"), 1L, 1);

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RejectedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RejectedApplicantId");

                    b.HasIndex("ApplicantId")
                        .IsUnique();

                    b.ToTable("RejectedApplicants");
                });

            modelBuilder.Entity("MRMS.Model.VisaSection.Visa", b =>
                {
                    b.Property<int>("VisaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisaId"), 1L, 1);

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisaNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VisaId");

                    b.HasIndex("ApplicantId");

                    b.ToTable("Visas");
                });

            modelBuilder.Entity("MRMS.Model.VisaSection.VisaFile", b =>
                {
                    b.Property<int>("VisaFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisaFileId"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Filepath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisaId")
                        .HasColumnType("int");

                    b.HasKey("VisaFileId");

                    b.HasIndex("FileTypeId");

                    b.HasIndex("VisaId");

                    b.ToTable("VisaFiles");
                });

            modelBuilder.Entity("MRMS.Model.VisaSection.VisaFileTransfer", b =>
                {
                    b.Property<int>("VisaFileTransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisaFileTransferId"), 1L, 1);

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<string>("From")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("To")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("TransferDate")
                        .HasColumnType("date");

                    b.Property<int>("VisaId")
                        .HasColumnType("int");

                    b.HasKey("VisaFileTransferId");

                    b.HasIndex("FileTypeId");

                    b.HasIndex("VisaId");

                    b.ToTable("VisaFileTransfers");
                });

            modelBuilder.Entity("MRMS.Model.VisaSection.VisaIssue", b =>
                {
                    b.Property<int>("VisaIssueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisaIssueId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ResolveDate")
                        .HasColumnType("date");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("VisaId")
                        .HasColumnType("int");

                    b.HasKey("VisaIssueId");

                    b.HasIndex("VisaId");

                    b.ToTable("VisaIssues");
                });

            modelBuilder.Entity("MRMS.Model.VisaSection.VisaIssueComment", b =>
                {
                    b.Property<int>("VisaIssueCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisaIssueCommentId"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisaIssueId")
                        .HasColumnType("int");

                    b.HasKey("VisaIssueCommentId");

                    b.HasIndex("VisaIssueId");

                    b.ToTable("VisaIssueComment");
                });

            modelBuilder.Entity("MRMS.Model.AgencySection.AgencySyndicate", b =>
                {
                    b.HasOne("MRMS.Model.AgencySection.Agency", "Agency")
                        .WithOne("AgencySyndicate")
                        .HasForeignKey("MRMS.Model.AgencySection.AgencySyndicate", "AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("MRMS.Model.ApplicantSection.Applicant", b =>
                {
                    b.HasOne("MRMS.Model.CommonSection.Agent", "Agent")
                        .WithMany("Applicants")
                        .HasForeignKey("AgentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MRMS.Model.ForwardingSection.Training", "Training")
                        .WithMany()
                        .HasForeignKey("TrainingId");

                    b.Navigation("Agent");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("MRMS.Model.ApplicantSection.ApplicantFile", b =>
                {
                    b.HasOne("MRMS.Model.ApplicantSection.Applicant", "Applicant")
                        .WithMany("ApplicantFiles")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MRMS.Model.CommonSection.FileType", "FileType")
                        .WithMany()
                        .HasForeignKey("FileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("FileType");
                });

            modelBuilder.Entity("MRMS.Model.ApplicantSection.ApplicantIssue", b =>
                {
                    b.HasOne("MRMS.Model.ApplicantSection.Applicant", "Applicant")
                        .WithMany("ApplicantIssues")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("MRMS.Model.ApplicantSection.ApplicantIssueComment", b =>
                {
                    b.HasOne("MRMS.Model.ApplicantSection.ApplicantIssue", "ApplicantIssue")
                        .WithMany("ApplicantIssueComments")
                        .HasForeignKey("ApplicantIssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicantIssue");
                });

            modelBuilder.Entity("MRMS.Model.ApplicationSection.Application", b =>
                {
                    b.HasOne("MRMS.Model.AgencySection.Agency", "Agency")
                        .WithMany("Applications")
                        .HasForeignKey("AgencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MRMS.Model.ApplicantSection.Applicant", "Applicant")
                        .WithOne("Application")
                        .HasForeignKey("MRMS.Model.ApplicationSection.Application", "ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MRMS.Model.DemandSection.Trade", "Trade")
                        .WithMany("Applications")
                        .HasForeignKey("TradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Agency");

                    b.Navigation("Applicant");

                    b.Navigation("Trade");
                });

            modelBuilder.Entity("MRMS.Model.ApplicationSection.ApplicationFile", b =>
                {
                    b.HasOne("MRMS.Model.ApplicationSection.Application", "Application")
                        .WithMany("ApplicationFiles")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MRMS.Model.CommonSection.FileType", "FileType")
                        .WithMany()
                        .HasForeignKey("FileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("FileType");
                });

            modelBuilder.Entity("MRMS.Model.ApplicationSection.ApplicationFileTransfer", b =>
                {
                    b.HasOne("MRMS.Model.ApplicationSection.Application", "Application")
                        .WithMany("ApplicationFileTransfers")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MRMS.Model.CommonSection.FileType", "FileType")
                        .WithMany()
                        .HasForeignKey("FileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("FileType");
                });

            modelBuilder.Entity("MRMS.Model.ApplicationSection.ApplicationIssue", b =>
                {
                    b.HasOne("MRMS.Model.ApplicationSection.Application", "Application")
                        .WithMany("ApplicantIssues")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("MRMS.Model.ApplicationSection.ApplicationIssueComment", b =>
                {
                    b.HasOne("MRMS.Model.ApplicationSection.ApplicationIssue", "ApplicationIssue")
                        .WithMany("DemandIssueComments")
                        .HasForeignKey("ApplicationIssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationIssue");
                });

            modelBuilder.Entity("MRMS.Model.CallingSection.Calling", b =>
                {
                    b.HasOne("MRMS.Model.ApplicantSection.Applicant", "Applicant")
                        .WithOne("Calling")
                        .HasForeignKey("MRMS.Model.CallingSection.Calling", "ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MRMS.Model.DemandSection.Trade", "Trade")
                        .WithMany("Callings")
                        .HasForeignKey("TradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("Trade");
                });

            modelBuilder.Entity("MRMS.Model.CallingSection.CallingFile", b =>
                {
                    b.HasOne("MRMS.Model.CallingSection.Calling", "Calling")
                        .WithMany("CallingFiles")
                        .HasForeignKey("CallingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MRMS.Model.CommonSection.FileType", "FileType")
                        .WithMany()
                        .HasForeignKey("FileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calling");

                    b.Navigation("FileType");
                });

            modelBuilder.Entity("MRMS.Model.CallingSection.CallingIssue", b =>
                {
                    b.HasOne("MRMS.Model.CallingSection.Calling", "Calling")
                        .WithMany("CallingIssues")
                        .HasForeignKey("CallingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calling");
                });

            modelBuilder.Entity("MRMS.Model.CallingSection.CallingIssueComment", b =>
                {
                    b.HasOne("MRMS.Model.CallingSection.CallingIssue", "CallingIssue")
                        .WithMany("CallingIssueComments")
                        .HasForeignKey("CallingIssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CallingIssue");
                });

            modelBuilder.Entity("MRMS.Model.CommonSection.Company", b =>
                {
                    b.HasOne("MRMS.Model.CommonSection.Country", "Country")
                        .WithMany("Companies")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("MRMS.Model.DemandSection.Demand", b =>
                {
                    b.HasOne("MRMS.Model.CommonSection.Company", "Company")
                        .WithMany("Demands")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("MRMS.Model.DemandSection.DemandFile", b =>
                {
                    b.HasOne("MRMS.Model.DemandSection.Demand", "Demand")
                        .WithMany("DemandFiles")
                        .HasForeignKey("DemandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MRMS.Model.CommonSection.FileType", "FileType")
                        .WithMany()
                        .HasForeignKey("FileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Demand");

                    b.Navigation("FileType");
                });

            modelBuilder.Entity("MRMS.Model.DemandSection.DemandIssue", b =>
                {
                    b.HasOne("MRMS.Model.DemandSection.Demand", "Demand")
                        .WithMany("DemandIssues")
                        .HasForeignKey("DemandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Demand");
                });

            modelBuilder.Entity("MRMS.Model.DemandSection.DemandIssueComment", b =>
                {
                    b.HasOne("MRMS.Model.DemandSection.DemandIssue", "Issue")
                        .WithMany("DemandIssueComments")
                        .HasForeignKey("DemandIssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("MRMS.Model.DemandSection.Trade", b =>
                {
                    b.HasOne("MRMS.Model.DemandSection.Demand", "Demand")
                        .WithMany("Trades")
                        .HasForeignKey("DemandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Demand");
                });

            modelBuilder.Entity("MRMS.Model.EmployeeSection.Employee", b =>
                {
                    b.HasOne("MRMS.Model.EmployeeSection.Designation", "Designation")
                        .WithMany("Employees")
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Designation");
                });

            modelBuilder.Entity("MRMS.Model.EmployeeSection.EmployeeFile", b =>
                {
                    b.HasOne("MRMS.Model.EmployeeSection.Employee", "Employee")
                        .WithMany("EmployeeFiles")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MRMS.Model.CommonSection.FileType", "FileType")
                        .WithMany()
                        .HasForeignKey("FileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("FileType");
                });

            modelBuilder.Entity("MRMS.Model.FlightSection.Flight", b =>
                {
                    b.HasOne("MRMS.Model.VisaSection.Visa", "Visa")
                        .WithOne("Flight")
                        .HasForeignKey("MRMS.Model.FlightSection.Flight", "VisaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visa");
                });

            modelBuilder.Entity("MRMS.Model.FlightSection.FlightFile", b =>
                {
                    b.HasOne("MRMS.Model.CommonSection.FileType", "FileType")
                        .WithMany()
                        .HasForeignKey("FileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MRMS.Model.FlightSection.Flight", "Flight")
                        .WithMany("FlightFiles")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileType");

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("MRMS.Model.FlightSection.FlightIssue", b =>
                {
                    b.HasOne("MRMS.Model.FlightSection.Flight", "Flight")
                        .WithMany("FlightIssues")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("MRMS.Model.FlightSection.FlightIssueComment", b =>
                {
                    b.HasOne("MRMS.Model.FlightSection.FlightIssue", "FlightIssue")
                        .WithMany("FlightIssueComments")
                        .HasForeignKey("FlightIssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlightIssue");
                });

            modelBuilder.Entity("MRMS.Model.ForwardingSection.BMET", b =>
                {
                    b.HasOne("MRMS.Model.ForwardingSection.Forwarding", "Forwarding")
                        .WithOne("BMET")
                        .HasForeignKey("MRMS.Model.ForwardingSection.BMET", "ForwardingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Forwarding");
                });

            modelBuilder.Entity("MRMS.Model.ForwardingSection.FingerPrint", b =>
                {
                    b.HasOne("MRMS.Model.ForwardingSection.Forwarding", "Forwarding")
                        .WithOne("FingerPrint")
                        .HasForeignKey("MRMS.Model.ForwardingSection.FingerPrint", "ForwardingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Forwarding");
                });

            modelBuilder.Entity("MRMS.Model.ForwardingSection.Forwarding", b =>
                {
                    b.HasOne("MRMS.Model.ApplicantSection.Applicant", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("MRMS.Model.ForwardingSection.ForwardingFile", b =>
                {
                    b.HasOne("MRMS.Model.CommonSection.FileType", "FileType")
                        .WithMany()
                        .HasForeignKey("FileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MRMS.Model.ForwardingSection.Forwarding", "Forwarding")
                        .WithMany("ForwardingFiles")
                        .HasForeignKey("ForwardingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileType");

                    b.Navigation("Forwarding");
                });

            modelBuilder.Entity("MRMS.Model.ForwardingSection.ForwardingFileTransfer", b =>
                {
                    b.HasOne("MRMS.Model.CommonSection.FileType", "FileType")
                        .WithMany()
                        .HasForeignKey("FileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MRMS.Model.ForwardingSection.Forwarding", "Forwarding")
                        .WithMany("ForwardingFileTransfers")
                        .HasForeignKey("ForwardingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileType");

                    b.Navigation("Forwarding");
                });

            modelBuilder.Entity("MRMS.Model.ForwardingSection.ForwardingIssue", b =>
                {
                    b.HasOne("MRMS.Model.ForwardingSection.Forwarding", "Forwarding")
                        .WithMany("ForwardingIssues")
                        .HasForeignKey("ForwardingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Forwarding");
                });

            modelBuilder.Entity("MRMS.Model.ForwardingSection.ForwardingIssueComment", b =>
                {
                    b.HasOne("MRMS.Model.ForwardingSection.ForwardingIssue", "ForwardingIssue")
                        .WithMany("ForwardingIssueComments")
                        .HasForeignKey("ForwardingIssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ForwardingIssue");
                });

            modelBuilder.Entity("MRMS.Model.ForwardingSection.Training", b =>
                {
                    b.HasOne("MRMS.Model.ForwardingSection.Forwarding", "Forwarding")
                        .WithOne("Training")
                        .HasForeignKey("MRMS.Model.ForwardingSection.Training", "ForwardingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MRMS.Model.ForwardingSection.TrainingCentre", "TrainingCentre")
                        .WithMany("Training")
                        .HasForeignKey("TrainingCentreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Forwarding");

                    b.Navigation("TrainingCentre");
                });

            modelBuilder.Entity("MRMS.Model.MedicalSection.MedicalFile", b =>
                {
                    b.HasOne("MRMS.Model.CommonSection.FileType", "FileType")
                        .WithMany()
                        .HasForeignKey("FileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MRMS.Model.MedicalSection.MedicalRecord", "MedicalRecord")
                        .WithMany("MedicalFiles")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileType");

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("MRMS.Model.MedicalSection.MedicalIssue", b =>
                {
                    b.HasOne("MRMS.Model.MedicalSection.MedicalRecord", "MedicalRecord")
                        .WithMany("MedicalIssues")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalRecord");
                });

            modelBuilder.Entity("MRMS.Model.MedicalSection.MedicalIssueComment", b =>
                {
                    b.HasOne("MRMS.Model.MedicalSection.MedicalIssue", "MedicalIssue")
                        .WithMany("MedicalIssueComments")
                        .HasForeignKey("MedicalIssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalIssue");
                });

            modelBuilder.Entity("MRMS.Model.MedicalSection.MedicalRecord", b =>
                {
                    b.HasOne("MRMS.Model.AgencySection.AgencySyndicate", "AgencySyndicate")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("AgencySyndicateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MRMS.Model.ApplicantSection.Applicant", "Applicant")
                        .WithOne("MedicalRecord")
                        .HasForeignKey("MRMS.Model.MedicalSection.MedicalRecord", "ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MRMS.Model.DemandSection.Demand", "Demand")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("DemandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MRMS.Model.MedicalSection.MedicalCenter", "MedicalCenter")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("MedicalCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgencySyndicate");

                    b.Navigation("Applicant");

                    b.Navigation("Demand");

                    b.Navigation("MedicalCenter");
                });

            modelBuilder.Entity("MRMS.Model.RejectSection.RejectedApplicant", b =>
                {
                    b.HasOne("MRMS.Model.ApplicantSection.Applicant", "Applicant")
                        .WithOne("RejectedApplicant")
                        .HasForeignKey("MRMS.Model.RejectSection.RejectedApplicant", "ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("MRMS.Model.VisaSection.Visa", b =>
                {
                    b.HasOne("MRMS.Model.ApplicantSection.Applicant", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("MRMS.Model.VisaSection.VisaFile", b =>
                {
                    b.HasOne("MRMS.Model.CommonSection.FileType", "FileType")
                        .WithMany()
                        .HasForeignKey("FileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MRMS.Model.VisaSection.Visa", "Visa")
                        .WithMany("VisaFiles")
                        .HasForeignKey("VisaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileType");

                    b.Navigation("Visa");
                });

            modelBuilder.Entity("MRMS.Model.VisaSection.VisaFileTransfer", b =>
                {
                    b.HasOne("MRMS.Model.CommonSection.FileType", "FileType")
                        .WithMany()
                        .HasForeignKey("FileTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MRMS.Model.VisaSection.Visa", "Visa")
                        .WithMany("VisaFileTransfers")
                        .HasForeignKey("VisaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileType");

                    b.Navigation("Visa");
                });

            modelBuilder.Entity("MRMS.Model.VisaSection.VisaIssue", b =>
                {
                    b.HasOne("MRMS.Model.VisaSection.Visa", "Visa")
                        .WithMany("VisaIssues")
                        .HasForeignKey("VisaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visa");
                });

            modelBuilder.Entity("MRMS.Model.VisaSection.VisaIssueComment", b =>
                {
                    b.HasOne("MRMS.Model.VisaSection.VisaIssue", "VisaIssue")
                        .WithMany("VisaIssueComments")
                        .HasForeignKey("VisaIssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VisaIssue");
                });

            modelBuilder.Entity("MRMS.Model.AgencySection.Agency", b =>
                {
                    b.Navigation("AgencySyndicate");

                    b.Navigation("Applications");
                });

            modelBuilder.Entity("MRMS.Model.AgencySection.AgencySyndicate", b =>
                {
                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("MRMS.Model.ApplicantSection.Applicant", b =>
                {
                    b.Navigation("ApplicantFiles");

                    b.Navigation("ApplicantIssues");

                    b.Navigation("Application");

                    b.Navigation("Calling");

                    b.Navigation("MedicalRecord");

                    b.Navigation("RejectedApplicant");
                });

            modelBuilder.Entity("MRMS.Model.ApplicantSection.ApplicantIssue", b =>
                {
                    b.Navigation("ApplicantIssueComments");
                });

            modelBuilder.Entity("MRMS.Model.ApplicationSection.Application", b =>
                {
                    b.Navigation("ApplicantIssues");

                    b.Navigation("ApplicationFileTransfers");

                    b.Navigation("ApplicationFiles");
                });

            modelBuilder.Entity("MRMS.Model.ApplicationSection.ApplicationIssue", b =>
                {
                    b.Navigation("DemandIssueComments");
                });

            modelBuilder.Entity("MRMS.Model.CallingSection.Calling", b =>
                {
                    b.Navigation("CallingFiles");

                    b.Navigation("CallingIssues");
                });

            modelBuilder.Entity("MRMS.Model.CallingSection.CallingIssue", b =>
                {
                    b.Navigation("CallingIssueComments");
                });

            modelBuilder.Entity("MRMS.Model.CommonSection.Agent", b =>
                {
                    b.Navigation("Applicants");
                });

            modelBuilder.Entity("MRMS.Model.CommonSection.Company", b =>
                {
                    b.Navigation("Demands");
                });

            modelBuilder.Entity("MRMS.Model.CommonSection.Country", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("MRMS.Model.DemandSection.Demand", b =>
                {
                    b.Navigation("DemandFiles");

                    b.Navigation("DemandIssues");

                    b.Navigation("MedicalRecords");

                    b.Navigation("Trades");
                });

            modelBuilder.Entity("MRMS.Model.DemandSection.DemandIssue", b =>
                {
                    b.Navigation("DemandIssueComments");
                });

            modelBuilder.Entity("MRMS.Model.DemandSection.Trade", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Callings");
                });

            modelBuilder.Entity("MRMS.Model.EmployeeSection.Designation", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("MRMS.Model.EmployeeSection.Employee", b =>
                {
                    b.Navigation("EmployeeFiles");
                });

            modelBuilder.Entity("MRMS.Model.FlightSection.Flight", b =>
                {
                    b.Navigation("FlightFiles");

                    b.Navigation("FlightIssues");
                });

            modelBuilder.Entity("MRMS.Model.FlightSection.FlightIssue", b =>
                {
                    b.Navigation("FlightIssueComments");
                });

            modelBuilder.Entity("MRMS.Model.ForwardingSection.Forwarding", b =>
                {
                    b.Navigation("BMET");

                    b.Navigation("FingerPrint");

                    b.Navigation("ForwardingFileTransfers");

                    b.Navigation("ForwardingFiles");

                    b.Navigation("ForwardingIssues");

                    b.Navigation("Training");
                });

            modelBuilder.Entity("MRMS.Model.ForwardingSection.ForwardingIssue", b =>
                {
                    b.Navigation("ForwardingIssueComments");
                });

            modelBuilder.Entity("MRMS.Model.ForwardingSection.TrainingCentre", b =>
                {
                    b.Navigation("Training");
                });

            modelBuilder.Entity("MRMS.Model.MedicalSection.MedicalCenter", b =>
                {
                    b.Navigation("MedicalRecords");
                });

            modelBuilder.Entity("MRMS.Model.MedicalSection.MedicalIssue", b =>
                {
                    b.Navigation("MedicalIssueComments");
                });

            modelBuilder.Entity("MRMS.Model.MedicalSection.MedicalRecord", b =>
                {
                    b.Navigation("MedicalFiles");

                    b.Navigation("MedicalIssues");
                });

            modelBuilder.Entity("MRMS.Model.VisaSection.Visa", b =>
                {
                    b.Navigation("Flight");

                    b.Navigation("VisaFileTransfers");

                    b.Navigation("VisaFiles");

                    b.Navigation("VisaIssues");
                });

            modelBuilder.Entity("MRMS.Model.VisaSection.VisaIssue", b =>
                {
                    b.Navigation("VisaIssueComments");
                });
#pragma warning restore 612, 618
        }
    }
}
